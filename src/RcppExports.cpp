// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ks_stat_presort
double ks_stat_presort(NumericVector joint, LogicalVector labs, double power, double na);
RcppExport SEXP _twosamples_ks_stat_presort(SEXP jointSEXP, SEXP labsSEXP, SEXP powerSEXP, SEXP naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type labs(labsSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type na(naSEXP);
    rcpp_result_gen = Rcpp::wrap(ks_stat_presort(joint, labs, power, na));
    return rcpp_result_gen;
END_RCPP
}
// kuiper_stat_presort
double kuiper_stat_presort(NumericVector joint, LogicalVector labs, double power, double na);
RcppExport SEXP _twosamples_kuiper_stat_presort(SEXP jointSEXP, SEXP labsSEXP, SEXP powerSEXP, SEXP naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type labs(labsSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type na(naSEXP);
    rcpp_result_gen = Rcpp::wrap(kuiper_stat_presort(joint, labs, power, na));
    return rcpp_result_gen;
END_RCPP
}
// cvm_stat_presort
double cvm_stat_presort(NumericVector joint, LogicalVector labs, double power, double na);
RcppExport SEXP _twosamples_cvm_stat_presort(SEXP jointSEXP, SEXP labsSEXP, SEXP powerSEXP, SEXP naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type labs(labsSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type na(naSEXP);
    rcpp_result_gen = Rcpp::wrap(cvm_stat_presort(joint, labs, power, na));
    return rcpp_result_gen;
END_RCPP
}
// ad_stat_presort
double ad_stat_presort(NumericVector joint, LogicalVector labs, double power, double na);
RcppExport SEXP _twosamples_ad_stat_presort(SEXP jointSEXP, SEXP labsSEXP, SEXP powerSEXP, SEXP naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type labs(labsSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type na(naSEXP);
    rcpp_result_gen = Rcpp::wrap(ad_stat_presort(joint, labs, power, na));
    return rcpp_result_gen;
END_RCPP
}
// wass_stat_presort
double wass_stat_presort(NumericVector joint, LogicalVector labs, double power, double na);
RcppExport SEXP _twosamples_wass_stat_presort(SEXP jointSEXP, SEXP labsSEXP, SEXP powerSEXP, SEXP naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type labs(labsSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type na(naSEXP);
    rcpp_result_gen = Rcpp::wrap(wass_stat_presort(joint, labs, power, na));
    return rcpp_result_gen;
END_RCPP
}
// dts_stat_presort
double dts_stat_presort(NumericVector joint, LogicalVector labs, double power, double na);
RcppExport SEXP _twosamples_dts_stat_presort(SEXP jointSEXP, SEXP labsSEXP, SEXP powerSEXP, SEXP naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type labs(labsSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type na(naSEXP);
    rcpp_result_gen = Rcpp::wrap(dts_stat_presort(joint, labs, power, na));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_twosamples_ks_stat_presort", (DL_FUNC) &_twosamples_ks_stat_presort, 4},
    {"_twosamples_kuiper_stat_presort", (DL_FUNC) &_twosamples_kuiper_stat_presort, 4},
    {"_twosamples_cvm_stat_presort", (DL_FUNC) &_twosamples_cvm_stat_presort, 4},
    {"_twosamples_ad_stat_presort", (DL_FUNC) &_twosamples_ad_stat_presort, 4},
    {"_twosamples_wass_stat_presort", (DL_FUNC) &_twosamples_wass_stat_presort, 4},
    {"_twosamples_dts_stat_presort", (DL_FUNC) &_twosamples_dts_stat_presort, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_twosamples(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
