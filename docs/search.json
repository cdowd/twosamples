[{"path":"https://twosampletest.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Connor Dowd. Author, maintainer.","code":""},{"path":"https://twosampletest.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dowd C (2022). twosamples: Fast Permutation Based Two Sample Tests. https://twosampletest.com, https://github.com/cdowd/twosamples.","code":"@Manual{,   title = {twosamples: Fast Permutation Based Two Sample Tests},   author = {Connor Dowd},   year = {2022},   note = {https://twosampletest.com, https://github.com/cdowd/twosamples}, }"},{"path":"https://twosampletest.com/index.html","id":"twosamples","dir":"","previous_headings":"","what":"Fast Permutation Based Two Sample Tests","title":"Fast Permutation Based Two Sample Tests","text":"goal twosamples allow easy two-sample testing using permutations. package offers quick (O(n^2) worst) memory light (O(n)) code number standard distance metrics two samples. Using permutations observed samples calculate null distributions metrics, package also provides assumption free p-values samples coming distribution. Details DTS statistic’s calculation, performance can found . Example R code works build test functions can found github . code uses release v1.0.0 algorithm simplicity, R rather C++, substantially slower.","code":""},{"path":"https://twosampletest.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Permutation Based Two Sample Tests","text":"can install released version twosamples CRAN : can install recent (possibly unstable) version github:","code":"install.packages(\"twosamples\") library(remotes) install_github(\"cdowd/twosamples\")"},{"path":"https://twosampletest.com/index.html","id":"system-requirements","dir":"","previous_headings":"Installation","what":"System Requirements","title":"Fast Permutation Based Two Sample Tests","text":"Going forward (v2.0.0 onwards), twosamples depends C++11 installed. true R platforms available . Compilation also requires headers cpp11 package.","code":""},{"path":"https://twosampletest.com/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast Permutation Based Two Sample Tests","text":"example, 100 observations two different Normal distributions.","code":"library(twosamples) vec1 = rnorm(100) vec2 = rnorm(100,0.5) output = two_sample(vec1,vec2) output #> Test Stat   P-Value  #>  9.695461  0.027500 summary(output) #> DTS Test  #> ========================= #> Test Statistic: 9.695461  #>        P-Value: 0.0275 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>     100     100    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 8.896328  #> Null rejected: samples are from different distributions plot(output)"},{"path":"https://twosampletest.com/index.html","id":"metric-example-calculations","dir":"","previous_headings":"","what":"Metric Example Calculations","title":"Fast Permutation Based Two Sample Tests","text":"section review different tests offered. ’ll offer brief description test mathematically, quick intuition. , ’ll show R code build test statistic – provide full description. code code underlying package, C++ rewrite . test statistics looks ECDFs samples correspond . ’ll refer E(x) ECDF sample 1, F(x) ECDF sample 2, G(x) ECDF joint sample. ECDF course takes real input returns value corresponding portion sample observed less equal point.","code":""},{"path":"https://twosampletest.com/index.html","id":"kolmogorov-smirnov-test","dir":"","previous_headings":"Metric Example Calculations","what":"Kolmogorov-Smirnov Test","title":"Fast Permutation Based Two Sample Tests","text":"KS test finds largest (vertical) difference two ECDFs. See ks_test(). example plot , KS statistic height vertical black line.","code":"ks_stat_R = function(vec1,vec2,power=1) {   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   e = c(rep(1/n1,n1),rep(0,   n2))   f = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = e[ind]   f = f[ind]      out = 0   Ecur = 0   Fcur = 0   height = 0   for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     if (d[i] != d[i+1]) height = abs(Fcur-Ecur)     if (height > out) out = height   }   out^power }"},{"path":"https://twosampletest.com/index.html","id":"kuiper-test","dir":"","previous_headings":"Metric Example Calculations","what":"Kuiper Test","title":"Fast Permutation Based Two Sample Tests","text":"Kuiper test much Kolmogorov-Smirnov, sums largest difference direction. .e. cares difference E(x)-F(x) F(x)-E(x). sense trading power mean-shifts power variance changes. See kuiper_test() example plot , Kuiper statistic sum heights vertical black lines.","code":"kuiper_stat_R = function(vec1,vec2,power=1) {    n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   e = c(rep(1/n1,n1),rep(0,   n2))   f = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = e[ind]   f = f[ind]      up = 0   down = 0   Ecur = 0   Fcur = 0   height = 0   for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     if (d[i] != d[i+1]) height = Fcur-Ecur     if (height > up) up = height     if (height < down) down = height   }   abs(down)^power + abs(up)^power }"},{"path":"https://twosampletest.com/index.html","id":"cramer-von-mises","dir":"","previous_headings":"Metric Example Calculations","what":"Cramer-Von Mises","title":"Fast Permutation Based Two Sample Tests","text":"Cramer-Von Mises criterion extends intuition Kuiper KS. actually full sum across every observation X difference |F(x)-E(x)|. use full joint sample gives substantial power gain, particularly higher moments shifting. See cvm_test(). example plot , CVM statistic sum heights vertical black lines.","code":"cvm_stat_R = function(vec1,vec2,power=2){   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   e = c(rep(1/n1,n1),rep(0,   n2))   f = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = e[ind]   f = f[ind]      out = 0   Ecur = 0   Fcur = 0   height = 0   dups = 1   for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     height = abs(Fcur-Ecur)     if (d[i] != d[i+1]) {       out = out + (height^power)*dups       dups = 1     } else if (d[i] == d[i+1]) {       dups = dups+1     }   }   out }"},{"path":"https://twosampletest.com/index.html","id":"anderson-darling","dir":"","previous_headings":"Metric Example Calculations","what":"Anderson-Darling","title":"Fast Permutation Based Two Sample Tests","text":"Anderson-Darling test starts Cramer-Von Mises logic. However, note points joint ECDF higher variance others. noise observations, receive lower weight. , can even describe ‘optimal’ weighting function – closely related joint ECDF - G. See ad_test() example plot , see variance joint ECDF range data. clearly peaks middle joint sample.  example plot , AD statistic weighted sum heights vertical lines, weights represented shading lines.","code":"ad_stat_R = function(vec1,vec2,power=2){   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   e = c(rep(1/n1,n1),rep(0,   n2))   f = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = e[ind]   f = f[ind]      out = 0   Ecur = 0   Fcur = 0   Gcur = 0   height = 0   dups = 1      for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     Gcur = Gcur+1/n     sd = (2*Gcur*(1-Gcur)/n)**0.5     height = abs(Fcur-Ecur)     if (d[i] != d[i+1]) {       out = out + ((height/sd)^power)*dups       dups = 1     } else if (d[i] == d[i+1]) {       dups = dups+1     }   }   out }"},{"path":"https://twosampletest.com/index.html","id":"wasserstein","dir":"","previous_headings":"Metric Example Calculations","what":"Wasserstein","title":"Fast Permutation Based Two Sample Tests","text":"Wasserstein distance normally two-sample distance, extension simple. terms ECDFs can actually described area ECDFs. Intuitively, improvement offers CVM allows extreme values change conclusions. say – KS, Kuiper, CVM, AD operated ordinal variables, sense distance different rank order observations. Wasserstein (DTS) require interval data. utilizing extra information encoded information interval data, Wasserstein DTS improve CVM AD. See wass_test() example plot , Wasserstein statistic shaded area ECDFs.","code":"wass_stat_R = function(vec1,vec2,power=1) {   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   e = c(rep(1/n1,n1),rep(0,   n2))   f = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = e[ind]   f = f[ind]      out = 0   Ecur = 0   Fcur = 0   height = 0   width = 0   for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     height = abs(Fcur-Ecur)     width = d[i+1]-d[i]     out = out + (height^power)*width   }   out }"},{"path":"https://twosampletest.com/index.html","id":"dtstwo_sample","dir":"","previous_headings":"Metric Example Calculations","what":"DTS/two_sample","title":"Fast Permutation Based Two Sample Tests","text":"Wasserstein metric improves CVM moving realm interval data, DTS improves AD . Alternately – DTS offers improvement Wasserstein AD offers CVM. See dts_test() (AKA two_sample() ). example plot , DTS statistic shaded area ECDFs, weighted variances – shown color shading.","code":"dts_stat_R = function(vec1,vec2,power=1) {   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   e = c(rep(1/n1,n1),rep(0,   n2))   f = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = e[ind]   f = f[ind]      out = 0   Ecur = 0   Fcur = 0   Gcur = 0   height = 0   width = 0    for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     Gcur = Gcur+1/n     sd = (2*Gcur*(1-Gcur)/n)**0.5     height = abs(Fcur-Ecur)     width = d[i+1]-d[i]     out = out + ((height/sd)^power)*width   }   out }"},{"path":"https://twosampletest.com/index.html","id":"permutation-testing","dir":"","previous_headings":"","what":"Permutation Testing","title":"Fast Permutation Based Two Sample Tests","text":"metric measuring distance two samples, easy enough code testing procedure. Specifically want test following: * H0: J=K Sample 1 distributed ..d. J Sample 2 ..d. K. Broadly, null, observations sample 1 sample 2 exchangeable.– randomly swapping observations samples, can generate new, equally likely data set (Null) DGP. can calculate metric distance samples data set. repeating procedure many times, can generate null distribution distance metric. can compare observed distance null distribution. distances non-negative, one-sided comparison. (Though wanted test whether sample hyper-regular looking one-sided test bottom). Moreover, unlike , general, two-sample procedures rely properties underlying distribution. procedures require continuity, derivatives, smoothness get asymptotic finite sample guarantees. procedures estimate underlying density, rather simply working working ECDF. testing procedures package rely statement observations ..d. Independence necessary exchangeability statement hold. identicality necessary null hypothesis sensible claim.","code":""},{"path":"https://twosampletest.com/reference/ad_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Anderson-Darling Test — ad_test","title":"Anderson-Darling Test — ad_test","text":"two-sample test based Anderson-Darling test statistic (ad_stat).","code":""},{"path":"https://twosampletest.com/reference/ad_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anderson-Darling Test — ad_test","text":"","code":"ad_test(a, b, nboots = 2000, p = default.p, keep.boots = T, keep.samples = F)  ad_stat(a, b, power = def_power)"},{"path":"https://twosampletest.com/reference/ad_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anderson-Darling Test — ad_test","text":"vector numbers (factors -- see details) b vector numbers nboots Number bootstrap iterations p power raise test stat keep.boots bootstrap values saved output? keep.samples samples saved output? power power raise test stat ","code":""},{"path":"https://twosampletest.com/reference/ad_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anderson-Darling Test — ad_test","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"https://twosampletest.com/reference/ad_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Anderson-Darling Test — ad_test","text":"AD test compares two ECDFs looking weighted sum squared differences -- evaluated point joint sample. weights determined variance joint ECDF point, peaks middle joint distribution (see figure ). Formally -- E ECDF sample 1, F ECDF sample 2, G ECDF joint sample $$AD = \\sum_{x \\k} \\left({|E(x)-F(x)| \\\\sqrt{2G(x)(1-G(x))/n} }\\right)^p $$ k joint sample. test p-value calculated randomly resampling two samples size using combined sample. Intuitively AD test improves CVM test giving lower weight noisy observations. example plot , see variance joint ECDF range data. clearly peaks middle joint sample.  example plot , AD statistic weighted sum heights vertical lines, weights represented shading lines.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power.","code":""},{"path":"https://twosampletest.com/reference/ad_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Anderson-Darling Test — ad_test","text":"ad_test: Permutation based two sample Anderson-Darling test ad_stat: Permutation based two sample Anderson-Darling test","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/ad_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anderson-Darling Test — ad_test","text":"","code":"set.seed(314159) vec1 = rnorm(20) vec2 = rnorm(20,0.5) out = ad_test(vec1,vec2) out #> Test Stat   P-Value  #>  329.0609    0.0095  summary(out) #> AD Test  #> ========================= #> Test Statistic: 329.0609  #>        P-Value: 0.0095 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      20      20    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 210.8735  #> Null rejected: samples are from different distributions plot(out)   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) ad_test(vec1,vec2) #> Test Stat   P-Value  #>  18.73016   0.52400"},{"path":"https://twosampletest.com/reference/combine.twosamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two objects of class twosamples — combine.twosamples","title":"Combine two objects of class twosamples — combine.twosamples","text":"function combines two twosamples objects -- concatenating bootstraps, recalculating pvalues, etc. works objects created \"keep.boots=T\" function intended one main purposes: combining parallized null calculations plotting combined outputs.","code":""},{"path":"https://twosampletest.com/reference/combine.twosamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two objects of class twosamples — combine.twosamples","text":"","code":"combine.twosamples(x, y, check.sample = T)"},{"path":"https://twosampletest.com/reference/combine.twosamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two objects of class twosamples — combine.twosamples","text":"x twosamples object y different twosamples object *_test function run data check.sample check samples saved object ? (can slow)","code":""},{"path":"https://twosampletest.com/reference/combine.twosamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two objects of class twosamples — combine.twosamples","text":"twosamples object correctly re-calculates p-value determines attributes","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/combine.twosamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two objects of class twosamples — combine.twosamples","text":"","code":"vec1 = rnorm(10) vec2 = rnorm(10,1) out1 = dts_test(vec1,vec2) out2 = dts_test(vec1,vec2) combined = combine.twosamples(out1,out2) summary(out1) #> DTS Test  #> ========================= #> Test Statistic: 15.5101  #>        P-Value: 0.00025 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      10      10    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 9.571914  #> Null rejected: samples are from different distributions #>  Max observed bootstrap value: 14.92013  #> No bootstrap values were more extreme than the observed value.  #>  p-value = 1/(2*bootstraps) is an imprecise placeholder summary(out2) #> DTS Test  #> ========================= #> Test Statistic: 15.5101  #>        P-Value: 0.00025 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      10      10    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 9.679014  #> Null rejected: samples are from different distributions #>  Max observed bootstrap value: 14.66408  #> No bootstrap values were more extreme than the observed value.  #>  p-value = 1/(2*bootstraps) is an imprecise placeholder summary(combined) #> DTS Test  #> ========================= #> Test Statistic: 15.5101  #>        P-Value: 0.000125 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      10      10    4000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 9.601398  #> Null rejected: samples are from different distributions #>  Max observed bootstrap value: 14.92013  #> No bootstrap values were more extreme than the observed value.  #>  p-value = 1/(2*bootstraps) is an imprecise placeholder plot(combined)"},{"path":"https://twosampletest.com/reference/cvm_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Cramer-von Mises Test — cvm_test","title":"Cramer-von Mises Test — cvm_test","text":"two-sample test based Cramer-Von Mises test statistic (cvm_stat).","code":""},{"path":"https://twosampletest.com/reference/cvm_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cramer-von Mises Test — cvm_test","text":"","code":"cvm_test(a, b, nboots = 2000, p = default.p, keep.boots = T, keep.samples = F)  cvm_stat(a, b, power = def_power)"},{"path":"https://twosampletest.com/reference/cvm_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cramer-von Mises Test — cvm_test","text":"vector numbers (factors -- see details) b vector numbers nboots Number bootstrap iterations p power raise test stat keep.boots bootstrap values saved output? keep.samples samples saved output? power power raise test stat ","code":""},{"path":"https://twosampletest.com/reference/cvm_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cramer-von Mises Test — cvm_test","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"https://twosampletest.com/reference/cvm_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cramer-von Mises Test — cvm_test","text":"CVM test compares two ECDFs looking sum squared differences -- evaluated point joint sample. Formally -- E ECDF sample 1 F ECDF sample 2, $$CVM = \\sum_{x\\k}|E(x)-F(x)|^p$$ k joint sample. test p-value calculated randomly resampling two samples size using combined sample. Intuitively CVM test improves KS using full joint sample, rather just maximum distance -- gives greater power shifts higher moments, like variance changes. example plot , CVM statistic sum heights vertical black lines.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power.","code":""},{"path":"https://twosampletest.com/reference/cvm_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cramer-von Mises Test — cvm_test","text":"cvm_test: Permutation based two sample Cramer-Von Mises test cvm_stat: Permutation based two sample Cramer-Von Mises test","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/cvm_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cramer-von Mises Test — cvm_test","text":"","code":"set.seed(314159) vec1 = rnorm(20) vec2 = rnorm(20,0.5) out = cvm_test(vec1,vec2) out #> Test Stat   P-Value  #>     3.180     0.009  summary(out) #> CVM Test  #> ========================= #> Test Statistic: 3.18  #>        P-Value: 0.009 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      20      20    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 2.0105  #> Null rejected: samples are from different distributions plot(out)   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) cvm_test(vec1,vec2) #> Test Stat   P-Value  #>     0.760     0.524"},{"path":"https://twosampletest.com/reference/ks_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Kolmogorov-Smirnov Test — ks_test","title":"Kolmogorov-Smirnov Test — ks_test","text":"two-sample test using Kolmogorov-Smirnov test statistic (ks_stat).","code":""},{"path":"https://twosampletest.com/reference/ks_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kolmogorov-Smirnov Test — ks_test","text":"","code":"ks_test(a, b, nboots = 2000, p = default.p, keep.boots = T, keep.samples = F)  ks_stat(a, b, power = def_power)"},{"path":"https://twosampletest.com/reference/ks_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kolmogorov-Smirnov Test — ks_test","text":"vector numbers (factors -- see details) b vector numbers nboots Number bootstrap iterations p power raise test stat keep.boots bootstrap values saved output? keep.samples samples saved output? power power raise test stat ","code":""},{"path":"https://twosampletest.com/reference/ks_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kolmogorov-Smirnov Test — ks_test","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"https://twosampletest.com/reference/ks_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kolmogorov-Smirnov Test — ks_test","text":"KS test compares two ECDFs looking maximum difference . Formally -- E ECDF sample 1 F ECDF sample 2, $$KS = max |E(x)-F(x)|^p$$ values x joint sample. test p-value calculated randomly resampling two samples size using combined sample. example plot , KS statistic height vertical black line.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power.","code":""},{"path":"https://twosampletest.com/reference/ks_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Kolmogorov-Smirnov Test — ks_test","text":"ks_test: Permutation based two sample Kolmogorov-Smirnov test ks_stat: Permutation based two sample Kolmogorov-Smirnov test","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/ks_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kolmogorov-Smirnov Test — ks_test","text":"","code":"set.seed(314159) vec1 = rnorm(20) vec2 = rnorm(20,0.5) out = ks_test(vec1,vec2) out #> Test Stat   P-Value  #>      0.45      0.03  summary(out) #> KS Test  #> ========================= #> Test Statistic: 0.45  #>        P-Value: 0.03 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      20      20    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 0.4  #> Null rejected: samples are from different distributions plot(out)   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) ks_test(vec1,vec2) #> Test Stat   P-Value  #>     0.400     0.716"},{"path":"https://twosampletest.com/reference/kuiper_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Kuiper Test — kuiper_test","title":"Kuiper Test — kuiper_test","text":"two-sample test based Kuiper test statistic (kuiper_stat).","code":""},{"path":"https://twosampletest.com/reference/kuiper_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kuiper Test — kuiper_test","text":"","code":"kuiper_test(   a,   b,   nboots = 2000,   p = default.p,   keep.boots = T,   keep.samples = F )  kuiper_stat(a, b, power = def_power)"},{"path":"https://twosampletest.com/reference/kuiper_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kuiper Test — kuiper_test","text":"vector numbers (factors -- see details) b vector numbers nboots Number bootstrap iterations p power raise test stat keep.boots bootstrap values saved output? keep.samples samples saved output? power power raise test stat ","code":""},{"path":"https://twosampletest.com/reference/kuiper_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kuiper Test — kuiper_test","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"https://twosampletest.com/reference/kuiper_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kuiper Test — kuiper_test","text":"Kuiper test compares two ECDFs looking maximum positive negative difference . Formally -- E ECDF sample 1 F ECDF sample 2, $$KUIPER = |max_x E(x)-F(x)|^p + |max_x F(x)-E(x)|^p$$. test p-value calculated randomly resampling two samples size using combined sample. example plot , Kuiper statistic sum heights vertical black lines.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power.","code":""},{"path":"https://twosampletest.com/reference/kuiper_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Kuiper Test — kuiper_test","text":"kuiper_test: Permutation based two sample Kuiper test kuiper_stat: Permutation based two sample Kuiper test","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/kuiper_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kuiper Test — kuiper_test","text":"","code":"set.seed(314159) vec1 = rnorm(20) vec2 = rnorm(20,0.5) out = kuiper_test(vec1,vec2) out #> Test Stat   P-Value  #>    0.4500    0.1495  summary(out) #> KUIPER Test  #> ========================= #> Test Statistic: 0.45  #>        P-Value: 0.1495  #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      20      20    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 0.5  #> Null not rejected: samples may be from same distribution plot(out)    # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) kuiper_test(vec1,vec2) #> Test Stat   P-Value  #>     0.400     0.716"},{"path":"https://twosampletest.com/reference/permutation_test_builder.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Test Builder — permutation_test_builder","title":"Permutation Test Builder — permutation_test_builder","text":"(Warning! function changed substantially v1.2.0 v2.0.0) function takes two-sample test statistic produces function performs randomization tests (sampling replacement) using test stat. internal function twosamples package.","code":""},{"path":"https://twosampletest.com/reference/permutation_test_builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Test Builder — permutation_test_builder","text":"","code":"permutation_test_builder(test_stat_function, default.p = 2)"},{"path":"https://twosampletest.com/reference/permutation_test_builder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Test Builder — permutation_test_builder","text":"test_stat_function function joint vector label vector producing positive number, intended test-statistic used. default.p allows introduction defaults parameters. Typically used control power functions raise something .","code":""},{"path":"https://twosampletest.com/reference/permutation_test_builder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation Test Builder — permutation_test_builder","text":"function returns function perform permutation tests given test stat.","code":""},{"path":"https://twosampletest.com/reference/permutation_test_builder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation Test Builder — permutation_test_builder","text":"test_stat_function must structured take two vectors -- first combined sample vector second logical vector indicating sample value came , well third fourth value. .e. (fun = function(jointvec,labelvec,val1,val2) ...). See examples.","code":""},{"path":"https://twosampletest.com/reference/permutation_test_builder.html","id":"conversion-function","dir":"Reference","previous_headings":"","what":"Conversion Function","title":"Permutation Test Builder — permutation_test_builder","text":"Test stat functions designed work prior version permutation_test_builder work. E.g. test statistic permutation_test_builder(mean_diff_stat,1) longer work intended, run code first.","code":"mean_diff_stat = function(x,y,pow) abs(mean(x)-mean(y))^pow perm_stat_helper = function(stat_fn,def_power) {   output = function(joint,vec_labels,power=def_power,na) {     a = joint[vec_labels]     b = joint[!vec_labels]     stat_fn(a,b,power)   }   output }  mean_diff_stat = perm_stat_helper(mean_diff_stat)"},{"path":"https://twosampletest.com/reference/permutation_test_builder.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Permutation Test Builder — permutation_test_builder","text":"permutation_test_builder: Takes test statistic, returns testing function.","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/permutation_test_builder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Test Builder — permutation_test_builder","text":"","code":"mean_stat = function(joint,label,p,na) abs(mean(joint[label])-mean(joint[!label]))**p myfun = twosamples:::permutation_test_builder(mean_stat,2.0) set.seed(314159) vec1 = rnorm(20) vec2 = rnorm(20,0.5) out = myfun(vec1,vec2) out #> Test Stat   P-Value  #>  1.005096  0.005000  summary(out) #> MEAN Test  #> ========================= #> Test Statistic: 1.005096  #>        P-Value: 0.005 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      20      20    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 0.5232561  #> Null rejected: samples are from different distributions plot(out)"},{"path":"https://twosampletest.com/reference/plot.twosamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Default plots for twosamples objects — plot.twosamples","title":"Default plots for twosamples objects — plot.twosamples","text":"Typically now produce histogram null distribution based bootstrapped values, vertical line marking value test statistic.","code":""},{"path":"https://twosampletest.com/reference/plot.twosamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default plots for twosamples objects — plot.twosamples","text":"","code":"# S3 method for twosamples plot(x, plot_type = c(\"boots_hist\"), nbins = 50, ...)"},{"path":"https://twosampletest.com/reference/plot.twosamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default plots for twosamples objects — plot.twosamples","text":"x object produced one twosamples *_test functions plot_type plot create? current option \"boots_hist\", nbins many bins (breaks) histogram ... parameters passed plotting functions","code":""},{"path":"https://twosampletest.com/reference/plot.twosamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default plots for twosamples objects — plot.twosamples","text":"Produces plot","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/plot.twosamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default plots for twosamples objects — plot.twosamples","text":"","code":"out = dts_test(rnorm(10),rnorm(10,1)) plot(out)"},{"path":"https://twosampletest.com/reference/two_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"DTS Test — two_sample","title":"DTS Test — two_sample","text":"two-sample test based DTS test statistic (dts_stat). recommended two-sample test package power. DTS statistic reweighted integral distance two ECDFs.","code":""},{"path":"https://twosampletest.com/reference/two_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DTS Test — two_sample","text":"","code":"dts_test(a, b, nboots = 2000, p = default.p, keep.boots = T, keep.samples = F)  two_sample(   a,   b,   nboots = 2000,   p = default.p,   keep.boots = T,   keep.samples = F )  dts_stat(a, b, power = def_power)"},{"path":"https://twosampletest.com/reference/two_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DTS Test — two_sample","text":"vector numbers (factors -- see details) b vector numbers nboots Number bootstrap iterations p power raise test stat keep.boots bootstrap values saved output? keep.samples samples saved output? power also power raise test stat ","code":""},{"path":"https://twosampletest.com/reference/two_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DTS Test — two_sample","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"https://twosampletest.com/reference/two_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DTS Test — two_sample","text":"DTS test compares two ECDFs looking reweighted Wasserstein distance two. See companion paper arXiv:2007.01360 https://codowd.com/public/DTS.pdf details test statistic, non-standard uses package (parallel big N, weighted observations, one sample tests, etc). wass_test() extends cvm_test() interval data, dts_test() extends ad_test() interval data. Formally -- E ECDF sample 1, F ECDF sample 2, G ECDF combined sample, $$DTS = \\int_{x\\R} \\left({|E(x)-F(x)| \\\\sqrt{2G(x)(1-G(x))/n}}\\right)^p$$ x. test p-value calculated randomly resampling two samples size using combined sample. Intuitively DTS test improves AD test allowing extreme observations carry weight. higher level -- CVM/AD/KS/etc require ordinal data. DTS (Wasserstein) gain power take advantages properties interval data -- .e. distances meaning. However, DTS, like Anderson-Darling (AD) also downweights noisier observations relative Wass, thus (hopefully) giving extra power. example plot , DTS statistic shaded area ECDFs, weighted variances -- shown color shading.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power. dts test assume distance adjacent factors 1.","code":""},{"path":"https://twosampletest.com/reference/two_sample.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"DTS Test — two_sample","text":"dts_test: Permutation based two sample test two_sample: Recommended two-sample test dts_stat: Permutation based two sample test","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/two_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DTS Test — two_sample","text":"","code":"set.seed(314159) vec1 = rnorm(20) vec2 = rnorm(20,0.5) dts_stat(vec1,vec2) #> [1] 10.96492 out = dts_test(vec1,vec2) out #> Test Stat   P-Value  #>  10.96492   0.00450  summary(out) #> DTS Test  #> ========================= #> Test Statistic: 10.96492  #>        P-Value: 0.0045 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      20      20    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 8.090338  #> Null rejected: samples are from different distributions plot(out)  two_sample(vec1,vec2) #> Test Stat   P-Value  #>  10.96492   0.00300   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) dts_test(vec1,vec2) #> Test Stat   P-Value  #>  4.292354  0.720500"},{"path":"https://twosampletest.com/reference/twosamples_class.html","id":null,"dir":"Reference","previous_headings":"","what":"twosamples_class — print.twosamples","title":"twosamples_class — print.twosamples","text":"Objects Class twosamples output *_test functions twosamples package.","code":""},{"path":"https://twosampletest.com/reference/twosamples_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"twosamples_class — print.twosamples","text":"","code":"# S3 method for twosamples print(x, ...)  # S3 method for twosamples summary(object, alpha = 0.05, ...)"},{"path":"https://twosampletest.com/reference/twosamples_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"twosamples_class — print.twosamples","text":"x twosamples object ... parameters passed print summary functions object twosamples-object summarize alpha Significance threshold determining null rejection","code":""},{"path":"https://twosampletest.com/reference/twosamples_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"twosamples_class — print.twosamples","text":"print.twosamples() returns nothing summarize.twosamples() returns nothing","code":""},{"path":"https://twosampletest.com/reference/twosamples_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"twosamples_class — print.twosamples","text":"default consist :length 2 vector, first item test statistic, second p-value. vector following attributes: details: length 3 vector sample sizes sample number bootstraps test_type: string describing type test statistic may also two attributes, depending options used running *_test function. useful plotting combining test runs. bootstraps: vector containing bootstrapped null values samples: list containing samples tested virtue named length 2 vector class \"twosamples\" following two attributes: names: c(\"Test Stat\",\"P-Value\") class: \"twosamples\" Multiple Twosamples objects made *_test routine run data can combined (getting correct p-value correct attributes) function combine_twosamples().","code":""},{"path":"https://twosampletest.com/reference/twosamples_class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"twosamples_class — print.twosamples","text":"print.twosamples: Print method objects class twosamples summary.twosamples: Summary method objects class twosamples","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/wass_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Distance Test — wass_test","title":"Wasserstein Distance Test — wass_test","text":"two-sample test based Wasserstein's distance (wass_stat).","code":""},{"path":"https://twosampletest.com/reference/wass_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Distance Test — wass_test","text":"","code":"wass_test(a, b, nboots = 2000, p = default.p, keep.boots = T, keep.samples = F)  wass_stat(a, b, power = def_power)"},{"path":"https://twosampletest.com/reference/wass_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Distance Test — wass_test","text":"vector numbers (factors -- see details) b vector numbers nboots Number bootstrap iterations p power raise test stat keep.boots bootstrap values saved output? keep.samples samples saved output? power power raise test stat ","code":""},{"path":"https://twosampletest.com/reference/wass_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Distance Test — wass_test","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"https://twosampletest.com/reference/wass_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wasserstein Distance Test — wass_test","text":"Wasserstein test compares two ECDFs looking Wasserstein distance two. course area two ECDFs. Formally -- E ECDF sample 1 F ECDF sample 2, $$WASS = \\int_{x \\R} |E(x)-F(x)|^p$$ across x. test p-value calculated randomly resampling two samples size using combined sample. Intuitively Wasserstein test improves CVM allowing extreme observations carry weight. higher level -- CVM/AD/KS/etc require ordinal data. Wasserstein gains power takes advantages properties interval data -- .e. distances meaning. example plot , Wasserstein statistic shaded area ECDFs.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power. wass_test assume distance adjacent factors 1.","code":""},{"path":"https://twosampletest.com/reference/wass_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Wasserstein Distance Test — wass_test","text":"wass_test: Permutation based two sample test using Wasserstein metric wass_stat: Permutation based two sample test using Wasserstein metric","code":""},{"path":[]},{"path":"https://twosampletest.com/reference/wass_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Distance Test — wass_test","text":"","code":"set.seed(314159) vec1 = rnorm(20) vec2 = rnorm(20,0.5) out = wass_test(vec1,vec2) out #> Test Stat   P-Value  #>  1.002545  0.006000  summary(out) #> WASS Test  #> ========================= #> Test Statistic: 1.002545  #>        P-Value: 0.006 * #> - - - - - - - - - - - - - #>      n1      n2 n.boots  #>      20      20    2000  #> ========================= #> Test stat rejection threshold for alpha = 0.05 is: 0.7413314  #> Null rejected: samples are from different distributions plot(out)   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) wass_test(vec1,vec2) #> Test Stat   P-Value  #>     0.800     0.716"},{"path":"https://twosampletest.com/news/index.html","id":"version-200","dir":"Changelog","previous_headings":"","what":"version 2.0.0","title":"version 2.0.0","text":"large update. Three big changes: Substantial speed improvements – improve absolute speed scaling Added generics plot, summary, print. Switched package Rcpp cpp11 backend. removes runtime dependency Rcpp, adds one C++11 adds compile time dependency cpp11. Together, lead many changes hood. consequence, permutation_test_builder substantially different (longer exported), order_stl longer exists.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"speed-2-0-0","dir":"Changelog","previous_headings":"","what":"Speed","title":"version 2.0.0","text":"run *_test function now sorts data one time. Denoting joint sample size N number bootstraps K, update moves code O(KNlog(N)) O(KN) + O(Nlog(N)). Particularly large samples large numbers bootstraps, means substantial improvement speed. Instead breaking code unpredictable ways, function longer exported. used , archived copies can found github (particularly example R code versions), emailing . Functions *_stat syntactically identical old ones still exist, longer used permutation_test_builder. changes likely reduced memory requirements users, though offset new default storing bootstrap outputs.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"classes-2-0-0","dir":"Changelog","previous_headings":"","what":"Classes","title":"version 2.0.0","text":"now ‘twosamples’ class, generics print, summary, plot, well function combining outputs correctly. make printed behavior much better. well making easy see fair bit information using summary. required making *_test functions export bootstrap values. memory intensive applications, can turned toggle keep.boots, cost longer able use plotting. future may add ability plot ECDFs test stat images. main reason keep.samples toggle turned default.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"possible-breaking-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Possible breaking changes","title":"version 2.0.0","text":"order sort , now proper permutation test . also resolve classes potential validity issues. Proofs associated paper (moment) relevant reason. order_stl longer exists. believe anybody used function outside internal package use. permutation_test_builder longer exported. aware anyone using function outside internal package use. similar function still available, require changing syntax functions inputs. Dependency switch Rcpp cpp11 additional system requirement C++11.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"version-120","dir":"Changelog","previous_headings":"","what":"version 1.2.0","title":"version 1.2.0","text":"CRAN release: 2022-06-06 version primarily bug fixes documentation updates. bug fixes may affect outputs users see.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"summary-1-2-0","dir":"Changelog","previous_headings":"","what":"Summary","title":"version 1.2.0","text":"expect update purely cosmetic vast majority users. - users ad_test cvm_test possible re-running code make significant differences conclusions. - rare users ad_test dts_test (aka two_sample) relied scale test stat (rather merely p-value), update change outputs substantially. principal change merely re-scaling everything (np)/(2p/2).","code":""},{"path":"https://twosampletest.com/news/index.html","id":"main-code-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Main code changes:","title":"version 1.2.0","text":"Fixed major bug ad_stat cvm_stat treated duplicates. bug lead excessive power situations. Re-running code, p-values test stats may change. Fixed minor bug ad_stat dts_stat calculated standard deviations. Re-running code change scale/location test stat, affect p-values. minor performance improvements: e.g. eliminated unnecessary comparisons (sd >0). renamed functions internal variables prevent unlikely namespace conflict.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"some-documentation-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Some documentation changes:","title":"version 1.2.0","text":"Website using pkgdown now exists https://twosampletest.com link website description Fixed error documentation describing ad_stat dts_stat – square root term dropped updated discussion order_stl added notes ability use factors (ordered )","code":""},{"path":"https://twosampletest.com/news/index.html","id":"some-development-oriented-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Some development oriented changes:","title":"version 1.2.0","text":"added automated testing basic functions added reverse dependency testing added automated R-CMD-CHECK github commit","code":""},{"path":"https://twosampletest.com/news/index.html","id":"version-111","dir":"Changelog","previous_headings":"","what":"version 1.1.1","title":"version 1.1.1","text":"CRAN release: 2020-07-19 update fixing documentation. Fixes bug lead poor formatting, improves formatting equations, adds graphs test statistics, adds links help pages. See v1.1.0 recent improvements codebase.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"version-110","dir":"Changelog","previous_headings":"","what":"version 1.1.0","title":"version 1.1.0","text":"CRAN release: 2020-07-14 update primarily fixing bug meant test stat sorting routine O(N^2), O(Nlog(N)).","code":""},{"path":"https://twosampletest.com/news/index.html","id":"major-updates-1-1-0","dir":"Changelog","previous_headings":"","what":"Major Updates","title":"version 1.1.0","text":"order_cpp using O(N^2) sort routine supposed ditched package release. now deprecated. order_stl replaces order_cpp, using STL sort function run required sorting routine.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"minor-updates-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor Updates","title":"version 1.1.0","text":"test stat calculations using 3 length N vectors necessary. fixed. paper demonstrating package components posted arXiv, linked throughout documentation. folder R/Extras updated use code simulations arXiv paper. permutation_test_builder now sampling replacement.","code":""},{"path":"https://twosampletest.com/news/index.html","id":"version-100","dir":"Changelog","previous_headings":"","what":"version 1.0.0","title":"version 1.0.0","text":"CRAN release: 2018-12-03 package released. package includes test statistic functions (written C++) following two-sample distance measures: Kolmogorov-Smirnov Kuiper Cramer-Von Mises Anderson-Darling Wasserstein Metric updated Wasserstein – referred DTS test statistic also corresponding permutation test function. addition two functions: permutation_test_builder order_cpp primarily intended internal use, reason export ’s use.","code":""}]
