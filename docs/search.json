[{"path":"twosampletest.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Connor Dowd. Author, maintainer.","code":""},{"path":"twosampletest.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dowd C (2022). twosamples: Fast Permutation Based Two Sample Tests. https://twosampletest.com, https://github.com/cdowd/twosamples.","code":"@Manual{,   title = {twosamples: Fast Permutation Based Two Sample Tests},   author = {Connor Dowd},   year = {2022},   note = {https://twosampletest.com, https://github.com/cdowd/twosamples}, }"},{"path":"twosampletest.com/index.html","id":"twosamples","dir":"","previous_headings":"","what":"Fast Permutation Based Two Sample Tests","title":"Fast Permutation Based Two Sample Tests","text":"goal twosamples allow easy two-sample testing using permutations. package offers quick (O(n^2) worst) memory light (O(n)) code number standard distance metrics two samples. Using permutations observed samples calculate null distributions metrics, package also provides assumption free p-values samples coming distribution. Details DTS statistic’s calculation, performance can found .","code":""},{"path":"twosampletest.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Permutation Based Two Sample Tests","text":"can install released version twosamples CRAN : can install recent (possibly unstable) version github:","code":"install.packages(\"twosamples\") library(remotes) install_github(\"cdowd/twosamples\")"},{"path":"twosampletest.com/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast Permutation Based Two Sample Tests","text":"example, 100 observations two different Normal distributions.","code":"library(twosamples) vec1 = rnorm(100) vec2 = rnorm(100,4) two_sample(vec1,vec2) #> Test Stat   P-Value  #>  94.90647   0.00025  #> attr(,\"details\") #>      n1      n2 n.boots  #>     100     100    2000"},{"path":"twosampletest.com/index.html","id":"metric-example-calculations","dir":"","previous_headings":"","what":"Metric Example Calculations","title":"Fast Permutation Based Two Sample Tests","text":"section review different tests offered. ’ll offer brief description test mathematically, quick intuition. , ’ll show R code build test statistic – provide full description. code code underlying package, C++ rewrite . test statistics looks ECDFs samples correspond . ’ll refer E(x) ECDF sample 1, F(x) ECDF sample 2, G(x) ECDF joint sample. ECDF course takes real input returns value corresponding portion sample observed less equal point.","code":""},{"path":"twosampletest.com/index.html","id":"kolmogorov-smirnov-test","dir":"","previous_headings":"Metric Example Calculations","what":"Kolmogorov-Smirnov Test","title":"Fast Permutation Based Two Sample Tests","text":"KS test finds largest difference two ECDFs. example plot , KS statistic height vertical black line.","code":"ks_stat_R = function(vec1,vec2,power=1) {   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   ee = c(rep(1/n1,n1),rep(0,   n2))   ff = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = ee[ind]   f = ff[ind]      out = 0   Ecur = 0   Fcur = 0   height = 0   for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     if (d[i] != d[i+1]) height = abs(Fcur-Ecur)     if (height > out) out = height   }   out**power }"},{"path":"twosampletest.com/index.html","id":"kuiper-test","dir":"","previous_headings":"Metric Example Calculations","what":"Kuiper Test","title":"Fast Permutation Based Two Sample Tests","text":"Kuiper test much Kolmogorov-Smirnov, sums largest difference direction. .e. cares difference E(x)-F(x) F(x)-E(x). sense trading power mean-shifts power variance changes. example plot , Kuiper statistic sum heights vertical black lines.","code":"kuiper_stat_R = function(vec1,vec2,power=1) {    n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   ee = c(rep(1/n1,n1),rep(0,   n2))   ff = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = ee[ind]   f = ff[ind]      up = 0   down = 0   Ecur = 0   Fcur = 0   height = 0   for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     if (d[i] != d[i+1]) height = Fcur-Ecur     if (height > up) up = height     if (height < down) down = height   }   abs(down)**power + abs(up)**power }"},{"path":"twosampletest.com/index.html","id":"cramer-von-mises","dir":"","previous_headings":"Metric Example Calculations","what":"Cramer-Von Mises","title":"Fast Permutation Based Two Sample Tests","text":"Cramer-Von Mises criterion extends intuition Kuiper KS. actually full sum across every observation X difference |F(x)-E(x)|. use full joint sample gives substantial power gain, particularly higher moments shifting. example plot , CVM statistic sum heights vertical black lines.","code":"cvm_stat_R = function(vec1,vec2,power=2){   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   ee = c(rep(1/n1,n1),rep(0,   n2))   ff = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = ee[ind]   f = ff[ind]      out = 0   Ecur = 0   Fcur = 0   height = 0   dups = 1   for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     height = abs(Fcur-Ecur)     if (d[i] != d[i+1]) {       out = out + (height**power)*dups       dups = 1     } else if (d[i] == d[i+1]) {       dups = dups+1     }   }   out }"},{"path":"twosampletest.com/index.html","id":"anderson-darling","dir":"","previous_headings":"Metric Example Calculations","what":"Anderson-Darling","title":"Fast Permutation Based Two Sample Tests","text":"Anderson-Darling test starts Cramer-Von Mises logic. However, note points joint ECDF higher variance others. noise observations, receive lower weight. , can even describe ‘optimal’ weighting function – closely related joint ECDF - G. example plot , see variance joint ECDF range data. clearly peaks middle joint sample.  example plot , AD statistic weighted sum heights vertical lines, weights represented shading lines.","code":"ad_stat_R = function(vec1,vec2,power=2){   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   ee = c(rep(1/n1,n1),rep(0,   n2))   ff = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = ee[ind]   f = ff[ind]      out = 0   Ecur = 0   Fcur = 0   Gcur = 0   height = 0   dups = 1      for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     Gcur = Gcur+1/n     sd = (2*Gcur*(1-Gcur)/n)**0.5     height = abs(Fcur-Ecur)     if (d[i] != d[i+1]) {       out = out + ((height/sd)**power)*dups       dups = 1     } else if (d[i] == d[i+1]) {       dups = dups+1     }   }   out }"},{"path":"twosampletest.com/index.html","id":"wasserstein","dir":"","previous_headings":"Metric Example Calculations","what":"Wasserstein","title":"Fast Permutation Based Two Sample Tests","text":"Wasserstein distance normally two-sample distance, extension simple. terms ECDFs can actually described area ECDFs. Intuitively, improvement offers CVM allows extreme values change conclusions. say – KS, Kuiper, CVM, AD operated ordinal variables, sense distance different rank order observations. Wasserstein (DTS) require interval data. utilizing extra information encoded information interval data, Wasserstein DTS improve CVM AD. example plot , Wasserstein statistic shaded area ECDFs.","code":"wass_stat_R = function(vec1,vec2,power=1) {   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   ee = c(rep(1/n1,n1),rep(0,   n2))   ff = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = ee[ind]   f = ff[ind]      out = 0   Ecur = 0   Fcur = 0   height = 0   width = 0   for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     height = abs(Fcur-Ecur)     width = d[i+1]-d[i]     out = out + (height**power)*width   }   out }"},{"path":"twosampletest.com/index.html","id":"dtstwo_sample","dir":"","previous_headings":"Metric Example Calculations","what":"DTS/two_sample","title":"Fast Permutation Based Two Sample Tests","text":"Wasserstein metric improves CVM moving realm interval data, DTS improves AD . Alternately – DTS offers improvement Wasserstein AD offers CVM. example plot , DTS statistic shaded area ECDFs, weighted variances – shown color shading.","code":"dts_stat_R = function(vec1,vec2,power=1) {   n1 = length(vec1)   n2 = length(vec2)   n = n1+n2      joint.sample = c(vec1,vec2)   ee = c(rep(1/n1,n1),rep(0,   n2))   ff = c(rep(0,   n1),rep(1/n2,n2))      ind = order(joint.sample)   d = joint.sample[ind]   e = ee[ind]   f = ff[ind]      out = 0   Ecur = 0   Fcur = 0   Gcur = 0   height = 0   width = 0    for (i in 1:(n-1)) {     Ecur = Ecur + e[i]     Fcur = Fcur + f[i]     Gcur = Gcur+1/n     sd = (2*Gcur*(1-Gcur)/n)**0.5     height = abs(Fcur-Ecur)     width = d[i+1]-d[i]     out = out + ((height/sd)**power)*width   }   out }"},{"path":"twosampletest.com/index.html","id":"permutation-testing","dir":"","previous_headings":"","what":"Permutation Testing","title":"Fast Permutation Based Two Sample Tests","text":"metric measuring distance two samples, easy enough code testing procedure. Specifically want test following: * H0: J=K Sample 1 distributed ..d. J Sample 2 ..d. K. Broadly, null, observations sample 1 sample 2 exchangeable.– randomly swapping observations samples, can generate new, equally likely data set (Null) DGP. can calculate metric distance samples data set. repeating procedure many times, can generate null distribution distance metric. can compare observed distance null distribution. distances non-negative, one-sided comparison. (Though wanted test whether sample hyper-regular looking one-sided test bottom). Moreover, unlike , general, two-sample procedures rely properties underlying distribution. procedures require continuity, derivatives, smoothness get asymptotic finite sample guarantees. procedures estimate underlying density, rather simply working working ECDF. testing procedures package rely statement observations ..d. Independence necessary exchangeability statement hold. identicality necessary null hypothesis sensible claim.","code":""},{"path":"twosampletest.com/index.html","id":"internals","dir":"","previous_headings":"","what":"Internals","title":"Fast Permutation Based Two Sample Tests","text":"two functions made available package. permutation_test_builder simple function takes C++ coded test statistics builds permutation tests outlined . function primarily intended internal use, others interest , . order_stl simple C++ function finds order vector using STL. primary computational operation involved test statistics, necessary order build ECDFs. designed internal C++ use, returns 0 indexed values, exactly 1 Base R order function. Suggestions improving portion algorithm appreciated.","code":"vec = rnorm(10) order_stl(vec) #>  [1] 5 6 0 9 1 4 3 7 2 8 order(vec)-1 #>  [1] 5 6 0 9 1 4 3 7 2 8"},{"path":"twosampletest.com/reference/ad_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Anderson-Darling Test — ad_stat","title":"Anderson-Darling Test — ad_stat","text":"two-sample test based Anderson-Darling test statistic (ad_stat).","code":""},{"path":"twosampletest.com/reference/ad_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anderson-Darling Test — ad_stat","text":"","code":"ad_stat(a, b, power = 2)  ad_test(a, b, nboots = 2000, p = default.p)"},{"path":"twosampletest.com/reference/ad_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anderson-Darling Test — ad_stat","text":"vector numbers (factors -- see details) b vector numbers power power raise test stat nboots Number bootstrap iterations p power raise test stat ","code":""},{"path":"twosampletest.com/reference/ad_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anderson-Darling Test — ad_stat","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"twosampletest.com/reference/ad_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Anderson-Darling Test — ad_stat","text":"AD test compares two ECDFs looking weighted sum squared differences -- evaluated point joint sample. weights determined variance joint ECDF point, peaks middle joint distribution (see figure ). Formally -- E ECDF sample 1, F ECDF sample 2, G ECDF joint sample $$AD = \\sum_{x \\k} \\left({|E(x)-F(x)| \\\\sqrt{2G(x)(1-G(x))/n} }\\right)^p $$ k joint sample. test p-value calculated randomly resampling two samples size using combined sample. Intuitively AD test improves CVM test giving lower weight noisy observations. example plot , see variance joint ECDF range data. clearly peaks middle joint sample.  example plot , AD statistic weighted sum heights vertical lines, weights represented shading lines.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power.","code":""},{"path":"twosampletest.com/reference/ad_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Anderson-Darling Test — ad_stat","text":"ad_stat: Anderson-Darling Test statistic ad_test: Permutation based two sample Anderson-Darling test","code":""},{"path":[]},{"path":"twosampletest.com/reference/ad_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anderson-Darling Test — ad_stat","text":"","code":"vec1 = rnorm(20) vec2 = rnorm(20,4) ad_test(vec1,vec2) #>  Test Stat    P-Value  #> 1237.14164    0.00025  #> attr(,\"details\") #>      n1      n2 n.boots  #>      20      20    2000   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) ad_test(vec1,vec2) #> Test Stat   P-Value  #>  18.73016   0.37500  #> attr(,\"details\") #>      n1      n2 n.boots  #>       5       5    2000"},{"path":"twosampletest.com/reference/cvm_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Cramer-von Mises Test — cvm_stat","title":"Cramer-von Mises Test — cvm_stat","text":"two-sample test based Cramer-Von Mises test statistic (cvm_stat).","code":""},{"path":"twosampletest.com/reference/cvm_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cramer-von Mises Test — cvm_stat","text":"","code":"cvm_stat(a, b, power = 2)  cvm_test(a, b, nboots = 2000, p = default.p)"},{"path":"twosampletest.com/reference/cvm_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cramer-von Mises Test — cvm_stat","text":"vector numbers (factors -- see details) b vector numbers power power raise test stat nboots Number bootstrap iterations p power raise test stat ","code":""},{"path":"twosampletest.com/reference/cvm_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cramer-von Mises Test — cvm_stat","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"twosampletest.com/reference/cvm_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cramer-von Mises Test — cvm_stat","text":"CVM test compares two ECDFs looking sum squared differences -- evaluated point joint sample. Formally -- E ECDF sample 1 F ECDF sample 2, $$CVM = \\sum_{x\\k}|E(x)-F(x)|^p$$ k joint sample. test p-value calculated randomly resampling two samples size using combined sample. Intuitively CVM test improves KS using full joint sample, rather just maximum distance -- gives greater power shifts higher moments, like variance changes. example plot , CVM statistic sum heights vertical black lines.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power.","code":""},{"path":"twosampletest.com/reference/cvm_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cramer-von Mises Test — cvm_stat","text":"cvm_stat: Cramer-Von Mises Test statistic cvm_test: Permutation based two sample Cramer-Von Mises test","code":""},{"path":[]},{"path":"twosampletest.com/reference/cvm_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cramer-von Mises Test — cvm_stat","text":"","code":"vec1 = rnorm(20) vec2 = rnorm(20,4) cvm_test(vec1,vec2) #> Test Stat   P-Value  #>  13.35000   0.00025  #> attr(,\"details\") #>      n1      n2 n.boots  #>      20      20    2000   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) cvm_test(vec1,vec2) #> Test Stat   P-Value  #>    0.7600    0.3235  #> attr(,\"details\") #>      n1      n2 n.boots  #>       5       5    2000"},{"path":"twosampletest.com/reference/ks_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Kolmogorov-Smirnov Test — ks_stat","title":"Kolmogorov-Smirnov Test — ks_stat","text":"two-sample test using Kolmogorov-Smirnov test statistic (ks_stat).","code":""},{"path":"twosampletest.com/reference/ks_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kolmogorov-Smirnov Test — ks_stat","text":"","code":"ks_stat(a, b, power = 1)  ks_test(a, b, nboots = 2000, p = default.p)"},{"path":"twosampletest.com/reference/ks_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kolmogorov-Smirnov Test — ks_stat","text":"vector numbers (factors -- see details) b vector numbers power power raise test stat nboots Number bootstrap iterations p power raise test stat ","code":""},{"path":"twosampletest.com/reference/ks_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kolmogorov-Smirnov Test — ks_stat","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"twosampletest.com/reference/ks_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kolmogorov-Smirnov Test — ks_stat","text":"KS test compares two ECDFs looking maximum difference . Formally -- E ECDF sample 1 F ECDF sample 2, $$KS = max |E(x)-F(x)|^p$$ values x joint sample. test p-value calculated randomly resampling two samples size using combined sample. example plot , KS statistic height vertical black line.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power.","code":""},{"path":"twosampletest.com/reference/ks_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Kolmogorov-Smirnov Test — ks_stat","text":"ks_stat: Kolmogorov-Smirnov test statistic ks_test: Permutation based two sample Kolmogorov-Smirnov test","code":""},{"path":[]},{"path":"twosampletest.com/reference/ks_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kolmogorov-Smirnov Test — ks_stat","text":"","code":"vec1 = rnorm(20) vec2 = rnorm(20,4) ks_test(vec1,vec2) #> Test Stat   P-Value  #>   0.95000   0.00025  #> attr(,\"details\") #>      n1      n2 n.boots  #>      20      20    2000   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) ks_test(vec1,vec2) #> Test Stat   P-Value  #>     0.400     0.465  #> attr(,\"details\") #>      n1      n2 n.boots  #>       5       5    2000"},{"path":"twosampletest.com/reference/kuiper_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Kuiper Test — kuiper_stat","title":"Kuiper Test — kuiper_stat","text":"two-sample test based Kuiper test statistic (kuiper_stat).","code":""},{"path":"twosampletest.com/reference/kuiper_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kuiper Test — kuiper_stat","text":"","code":"kuiper_stat(a, b, power = 1)  kuiper_test(a, b, nboots = 2000, p = default.p)"},{"path":"twosampletest.com/reference/kuiper_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kuiper Test — kuiper_stat","text":"vector numbers (factors -- see details) b vector numbers power power raise test stat nboots Number bootstrap iterations p power raise test stat ","code":""},{"path":"twosampletest.com/reference/kuiper_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kuiper Test — kuiper_stat","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"twosampletest.com/reference/kuiper_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kuiper Test — kuiper_stat","text":"Kuiper test compares two ECDFs looking maximum positive negative difference . Formally -- E ECDF sample 1 F ECDF sample 2, $$KUIPER = |max_x E(x)-F(x)|^p + |max_x F(x)-E(x)|^p$$. test p-value calculated randomly resampling two samples size using combined sample. example plot , Kuiper statistic sum heights vertical black lines.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power.","code":""},{"path":"twosampletest.com/reference/kuiper_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Kuiper Test — kuiper_stat","text":"kuiper_stat: Kuiper Test statistic kuiper_test: Permutation based two sample Kuiper test","code":""},{"path":[]},{"path":"twosampletest.com/reference/kuiper_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kuiper Test — kuiper_stat","text":"","code":"vec1 = rnorm(20) vec2 = rnorm(20,4) kuiper_test(vec1,vec2) #> Test Stat   P-Value  #>   0.95000   0.00025  #> attr(,\"details\") #>      n1      n2 n.boots  #>      20      20    2000   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) kuiper_test(vec1,vec2) #> Test Stat   P-Value  #>    0.4000    0.5605  #> attr(,\"details\") #>      n1      n2 n.boots  #>       5       5    2000"},{"path":"twosampletest.com/reference/order_stl.html","id":null,"dir":"Reference","previous_headings":"","what":"Order function in C++ using the STL — order_stl","title":"Order function in C++ using the STL — order_stl","text":"Simply finds order vector c++. Purely internal use, exposed user reason . order_stl(x)+1 equal base R order(x).","code":""},{"path":"twosampletest.com/reference/order_stl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order function in C++ using the STL — order_stl","text":"","code":"order_stl(x)"},{"path":"twosampletest.com/reference/order_stl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order function in C++ using the STL — order_stl","text":"x numeric vector","code":""},{"path":"twosampletest.com/reference/order_stl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order function in C++ using the STL — order_stl","text":"length vector integers representing order input vector","code":""},{"path":"twosampletest.com/reference/order_stl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order function in C++ using the STL — order_stl","text":"","code":"vec = c(1,4,3,2) order_stl(vec) #> [1] 0 3 2 1 order(vec)-1 #> [1] 0 3 2 1"},{"path":"twosampletest.com/reference/permutation_test_builder.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Test Builder — permutation_test_builder","title":"Permutation Test Builder — permutation_test_builder","text":"function takes simple two-sample test statistic produces function performs randomization tests (sampling replacement) using test stat.","code":""},{"path":"twosampletest.com/reference/permutation_test_builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Test Builder — permutation_test_builder","text":"","code":"permutation_test_builder(test_stat_function, default.p = 2)"},{"path":"twosampletest.com/reference/permutation_test_builder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Test Builder — permutation_test_builder","text":"test_stat_function function two vectors producing positive number, intended test-statistic used. default.p allows introduction defaults parameters. Typically used control power functions raise something .","code":""},{"path":"twosampletest.com/reference/permutation_test_builder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation Test Builder — permutation_test_builder","text":"function returns function perform permutation tests given test stat.","code":""},{"path":"twosampletest.com/reference/permutation_test_builder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation Test Builder — permutation_test_builder","text":"test_stat_function must structured take two separate vectors, third value. .e. (fun = function(vec1,vec2,val1) ...). See examples.","code":""},{"path":"twosampletest.com/reference/permutation_test_builder.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Permutation Test Builder — permutation_test_builder","text":"permutation_test_builder: Takes test statistic, returns testing function.","code":""},{"path":[]},{"path":"twosampletest.com/reference/permutation_test_builder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Test Builder — permutation_test_builder","text":"","code":"mean_stat = function(a,b,p) abs(mean(a)-mean(b))**p myfun = permutation_test_builder(mean_stat,2.0) vec1 = rnorm(20) vec2 = rnorm(20,4) myfun(vec1,vec2) #> Test Stat   P-Value  #>  12.80743   0.00025  #> attr(,\"details\") #>      n1      n2 n.boots  #>      20      20    2000"},{"path":"twosampletest.com/reference/two_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"DTS Test — dts_stat","title":"DTS Test — dts_stat","text":"two-sample test based DTS test statistic (dts_stat). recommended two-sample test package power. DTS statistic reweighted integral distance two ECDFs.","code":""},{"path":"twosampletest.com/reference/two_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DTS Test — dts_stat","text":"","code":"dts_stat(a, b, power = 1)  dts_test(a, b, nboots = 2000, p = default.p)  two_sample(a, b, nboots = 2000, p = default.p)"},{"path":"twosampletest.com/reference/two_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DTS Test — dts_stat","text":"vector numbers (factors -- see details) b vector numbers power also power raise test stat nboots Number bootstrap iterations p power raise test stat ","code":""},{"path":"twosampletest.com/reference/two_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DTS Test — dts_stat","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"twosampletest.com/reference/two_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DTS Test — dts_stat","text":"DTS test compares two ECDFs looking reweighted Wasserstein distance two. See companion paper arXiv:2007.01360 https://codowd.com/public/DTS.pdf details test statistic, non-standard uses package (parallel big N, weighted observations, one sample tests, etc). wass_test() extends cvm_test() interval data, dts_test() extends ad_test() interval data. Formally -- E ECDF sample 1, F ECDF sample 2, G ECDF combined sample, $$DTS = \\int_{x\\R} \\left({|E(x)-F(x)| \\\\sqrt{2G(x)(1-G(x))/n}}\\right)^p$$ x. test p-value calculated randomly resampling two samples size using combined sample. Intuitively DTS test improves AD test allowing extreme observations carry weight. higher level -- CVM/AD/KS/etc require ordinal data. DTS (Wasserstein) gain power take advantages properties interval data -- .e. distances meaning. However, DTS, like Anderson-Darling (AD) also downweights noisier observations relative Wass, thus (hopefully) giving extra power. example plot , DTS statistic shaded area ECDFs, weighted variances -- shown color shading.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power. dts test assume distance adjacent factors 1.","code":""},{"path":"twosampletest.com/reference/two_sample.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"DTS Test — dts_stat","text":"dts_stat: Test statistic based weighted area ECDFs dts_test: Permutation based two sample test two_sample: Recommended two-sample test","code":""},{"path":[]},{"path":"twosampletest.com/reference/two_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DTS Test — dts_stat","text":"","code":"vec1 = rnorm(20) vec2 = rnorm(20,4) dts_stat(vec1,vec2) #> [1] 43.79083 dts_test(vec1,vec2) #> Test Stat   P-Value  #>  43.79083   0.00025  #> attr(,\"details\") #>      n1      n2 n.boots  #>      20      20    2000  two_sample(vec1,vec2) #> Test Stat   P-Value  #>  43.79083   0.00025  #> attr(,\"details\") #>      n1      n2 n.boots  #>      20      20    2000   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) dts_test(vec1,vec2) #> Test Stat   P-Value  #>  4.292354  0.457500  #> attr(,\"details\") #>      n1      n2 n.boots  #>       5       5    2000"},{"path":"twosampletest.com/reference/wass_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Wasserstein Distance Test — wass_stat","title":"Wasserstein Distance Test — wass_stat","text":"two-sample test based Wasserstein's distance (wass_stat).","code":""},{"path":"twosampletest.com/reference/wass_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wasserstein Distance Test — wass_stat","text":"","code":"wass_stat(a, b, power = 1)  wass_test(a, b, nboots = 2000, p = default.p)"},{"path":"twosampletest.com/reference/wass_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wasserstein Distance Test — wass_stat","text":"vector numbers (factors -- see details) b vector numbers power power raise test stat nboots Number bootstrap iterations p power raise test stat ","code":""},{"path":"twosampletest.com/reference/wass_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wasserstein Distance Test — wass_stat","text":"Output length 2 Vector test stat p-value order. vector 3 attributes -- sample sizes sample, number bootstraps performed pvalue.","code":""},{"path":"twosampletest.com/reference/wass_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wasserstein Distance Test — wass_stat","text":"Wasserstein test compares two ECDFs looking Wasserstein distance two. course area two ECDFs. Formally -- E ECDF sample 1 F ECDF sample 2, $$WASS = \\int_{x \\R} |E(x)-F(x)|^p$$ across x. test p-value calculated randomly resampling two samples size using combined sample. Intuitively Wasserstein test improves CVM allowing extreme observations carry weight. higher level -- CVM/AD/KS/etc require ordinal data. Wasserstein gains power takes advantages properties interval data -- .e. distances meaning. example plot , Wasserstein statistic shaded area ECDFs.  Inputs b can also vectors ordered (unordered) factors, long levels orderings. possible, ordering factors substantially increase power. wass_test assume distance adjacent factors 1.","code":""},{"path":"twosampletest.com/reference/wass_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Wasserstein Distance Test — wass_stat","text":"wass_stat: Wasserstein metric two ECDFs wass_test: Permutation based two sample test using Wasserstein metric","code":""},{"path":[]},{"path":"twosampletest.com/reference/wass_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wasserstein Distance Test — wass_stat","text":"","code":"vec1 = rnorm(20) vec2 = rnorm(20,4) wass_test(vec1,vec2) #> Test Stat   P-Value  #>  3.686588  0.000250  #> attr(,\"details\") #>      n1      n2 n.boots  #>      20      20    2000   # Example using ordered factors vec1 = factor(LETTERS[1:5],levels = LETTERS,ordered = TRUE) vec2 = factor(LETTERS[c(1,2,2,2,4)],levels = LETTERS, ordered=TRUE) wass_test(vec1,vec2) #> Test Stat   P-Value  #>    0.8000    0.4815  #> attr(,\"details\") #>      n1      n2 n.boots  #>       5       5    2000"},{"path":"twosampletest.com/news/index.html","id":"version-120","dir":"Changelog","previous_headings":"","what":"version 1.2.0","title":"version 1.2.0","text":"CRAN release: 2022-06-06 version primarily bug fixes documentation updates. bug fixes may affect outputs users see.","code":""},{"path":"twosampletest.com/news/index.html","id":"summary-1-2-0","dir":"Changelog","previous_headings":"","what":"Summary","title":"version 1.2.0","text":"expect update purely cosmetic vast majority users. - users ad_test cvm_test possible re-running code make significant differences conclusions. - rare users ad_test dts_test (aka two_sample) relied scale test stat (rather merely p-value), update change outputs substantially. principal change merely re-scaling everything (np)/(2p/2).","code":""},{"path":"twosampletest.com/news/index.html","id":"main-code-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Main code changes:","title":"version 1.2.0","text":"Fixed major bug ad_stat cvm_stat treated duplicates. bug lead excessive power situations. Re-running code, p-values test stats may change. Fixed minor bug ad_stat dts_stat calculated standard deviations. Re-running code change scale/location test stat, affect p-values. minor performance improvements: e.g. eliminated unnecessary comparisons (sd >0). renamed functions internal variables prevent unlikely namespace conflict.","code":""},{"path":"twosampletest.com/news/index.html","id":"some-documentation-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Some documentation changes:","title":"version 1.2.0","text":"Website using pkgdown now exists https://twosampletest.com link website description Fixed error documentation describing ad_stat dts_stat – square root term dropped updated discussion order_stl added notes ability use factors (ordered )","code":""},{"path":"twosampletest.com/news/index.html","id":"some-development-oriented-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Some development oriented changes:","title":"version 1.2.0","text":"added automated testing basic functions added reverse dependency testing added automated R-CMD-CHECK github commit","code":""},{"path":"twosampletest.com/news/index.html","id":"version-111","dir":"Changelog","previous_headings":"","what":"version 1.1.1","title":"version 1.1.1","text":"CRAN release: 2020-07-19 update fixing documentation. Fixes bug lead poor formatting, improves formatting equations, adds graphs test statistics, adds links help pages. See v1.1.0 recent improvements codebase.","code":""},{"path":"twosampletest.com/news/index.html","id":"version-110","dir":"Changelog","previous_headings":"","what":"version 1.1.0","title":"version 1.1.0","text":"CRAN release: 2020-07-14 update primarily fixing bug meant test stat sorting routine O(N^2), O(Nlog(N)).","code":""},{"path":"twosampletest.com/news/index.html","id":"major-updates-1-1-0","dir":"Changelog","previous_headings":"","what":"Major Updates","title":"version 1.1.0","text":"order_cpp using O(N^2) sort routine supposed ditched package release. now deprecated. order_stl replaces order_cpp, using STL sort function run required sorting routine.","code":""},{"path":"twosampletest.com/news/index.html","id":"minor-updates-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor Updates","title":"version 1.1.0","text":"test stat calculations using 3 length N vectors necessary. fixed. paper demonstrating package components posted arXiv, linked throughout documentation. folder R/Extras updated use code simulations arXiv paper. permutation_test_builder now sampling replacement.","code":""},{"path":"twosampletest.com/news/index.html","id":"version-100","dir":"Changelog","previous_headings":"","what":"version 1.0.0","title":"version 1.0.0","text":"CRAN release: 2018-12-03 package released. package includes test statistic functions (written C++) following two-sample distance measures: Kolmogorov-Smirnov Kuiper Cramer-Von Mises Anderson-Darling Wasserstein Metric updated Wasserstein – referred DTS test statistic also corresponding permutation test function. addition two functions: permutation_test_builder order_cpp primarily intended internal use, reason export ’s use.","code":""}]
